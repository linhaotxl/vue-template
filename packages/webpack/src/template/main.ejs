(function () {

  // 模块缓存对象
  var __webpack_module_cache__ = {}

  /**
   * 模拟 require 函数
   * @param {string} moduleId 导入模块 id
   */
  function __webpack_require__ (moduleId) {
    // 有缓存直接读取缓存
    if (__webpack_module_cache__[moduleId]) {
      return __webpack_module_cache__[moduleId].exports
    }

    // 没缓存，首先创建 module 对象
    var module = (__webpack_module_cache__[moduleId] = {
      exports: {}
    })

    // 调用模块代码
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__)

    // 返回模块导出对象
    return module.exports
  }


  <% if (global) { %>
  // global
  ;(function () {
    __webpack_require__.g = (function () {
      if (typeof globalThis === 'object') {
        return globalThis
      }
    })()
  })()
  <% } %>


  <% if (publicPath) { %>
  // public path
  ;(function () {
    var scriptUrl = ''
    var document = __webpack_require__.g.document
    // dom 环境
    if (document) {
      scriptUrl = document.currentScript.src
    }
    // 将最后一个 / 后面替换为 /，即去掉文件名，保留目录
    scriptUrl = scriptUrl.replace(/\/[^\/]+$/, '/')
    __webpack_require__.p = scriptUrl
  })()
  <% } %>


  <% if (asyncChunk) { %>
  /**
   * 已经安装好的模块
   * 0 表示已经加载成功
   */
  var installedChunks = {
    main: 0
  }

  /**
   * 异步加载模块
   * @param {string} chunkId chunk 名称
   */
  __webpack_require__.e = function (chunkId) {
    // 调用 j 等待所有 promises 成功执行
    var promises = []
    __webpack_require__.j(chunkId, promises)
    return Promise.all(promises)
  }

  /**
   *
   */
  __webpack_require__.j = function (chunkId, promises) {
    const promise = new Promise((resolve, reject) => {
      installedChunks[chunkId] = [resolve, reject]
    })
    promises.push(promise)

    var url = __webpack_require__.p + chunkId + '.js'
    var script = document.createElement('script')
    script.src = url
    document.head.appendChild(script)
  }

  ;(function () {
    function webpackJsonpCallback ([chunkId, otherModules]) {
      var resolves = []

      resolves.push(installedChunks[chunkId][0])
      installedChunks[chunkId] = 0

      for (var id in otherModules) {
        __webpack_modules__[id] = otherModules[id]
      }

      while (resolves.length) {
        resolves.shift()()
      }
    }

    __webpack_require__.g['webpackChunk<%- packageName %>'] = {
      push: webpackJsonpCallback
    }
  })()
  <% } %>

  var __webpack_modules__ = ({
    <%- include('modules.ejs', { modules: [chunk.entryModule] }) %>
    <%- include('modules.ejs', { modules: chunk.dependenceModules }) %>
  })

  var __webpack_exports__ = __webpack_require__("<%- chunk.entryModule.id %>")

})()
